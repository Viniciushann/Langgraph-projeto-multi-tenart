#!/usr/bin/env python3
"""
Script para validar a Fase 1 - Estrutura Multi-Tenant
"""
import os
from supabase import create_client, Client

# Credenciais Supabase DEV
SUPABASE_URL = "https://wmzhbgcqugtctnzyinqw.supabase.co"
SUPABASE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6IndtemhiZ2NxdWd0Y3RuenlpbnF3Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE3NTQ5NDAsImV4cCI6MjA3NzMzMDk0MH0.pziIBNSJfex-dEJDJ0NeU7awjadoJXg87a8TONc4Xic"

def main():
    print("=" * 70)
    print("üîç VALIDA√á√ÉO FASE 1 - ESTRUTURA MULTI-TENANT")
    print("=" * 70)
    print()

    # Conectar no Supabase
    print("üì° Conectando no Supabase DEV...")
    supabase: Client = create_client(SUPABASE_URL, SUPABASE_KEY)
    print("‚úÖ Conectado!\n")

    relatorio = []
    relatorio.append("# üìä RELAT√ìRIO - FASE 1: ESTRUTURA MULTI-TENANT")
    relatorio.append("")
    relatorio.append("## ‚úÖ Status Geral")
    relatorio.append("")

    # 1. Verificar Tenants
    print("1Ô∏è‚É£ Verificando TENANTS...")
    try:
        tenants = supabase.table('tenants').select('*').execute()
        print(f"   ‚úÖ {len(tenants.data)} tenants encontrados")

        relatorio.append("### 1. Tenants Criados")
        relatorio.append("")
        for tenant in tenants.data:
            print(f"      - {tenant['nome_empresa']} ({tenant['segmento']})")
            relatorio.append(f"**{tenant['nome_empresa']}**")
            relatorio.append(f"- UUID: `{tenant['id']}`")
            relatorio.append(f"- Segmento: {tenant['segmento']}")
            relatorio.append(f"- WhatsApp: {tenant['whatsapp_numero']}")
            relatorio.append(f"- Plano: {tenant['plano']}")
            relatorio.append(f"- Status: {'üü¢ Ativo' if tenant['ativo'] else 'üî¥ Inativo'}")
            relatorio.append("")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")
        relatorio.append(f"‚ùå Erro ao verificar tenants: {e}")

    # 2. Verificar Features
    print("\n2Ô∏è‚É£ Verificando TENANT_FEATURES...")
    try:
        features = supabase.table('tenant_features').select('*').execute()
        print(f"   ‚úÖ {len(features.data)} configura√ß√µes de features")

        relatorio.append("### 2. Features dos Tenants")
        relatorio.append("")
        for feature in features.data:
            tenant = next((t for t in tenants.data if t['id'] == feature['tenant_id']), None)
            if tenant:
                print(f"      - {tenant['nome_empresa']}: RAG={feature['rag_habilitado']}, "
                      f"Audio={feature['transcricao_audio']}, Multi-prof={feature['multi_profissional']}")
                relatorio.append(f"**{tenant['nome_empresa']}:**")
                relatorio.append(f"- ‚úÖ Atendimento B√°sico: {feature['atendimento_basico']}")
                relatorio.append(f"- ‚úÖ Transcri√ß√£o Audio: {feature['transcricao_audio']}")
                relatorio.append(f"- ‚úÖ An√°lise Imagem: {feature['analise_imagem']}")
                relatorio.append(f"- ‚úÖ RAG: {feature['rag_habilitado']}")
                relatorio.append(f"- ‚úÖ Agendamento: {feature['agendamento_habilitado']}")
                relatorio.append(f"- ‚úÖ Multi-profissional: {feature['multi_profissional']}")
                relatorio.append("")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

    # 3. Verificar Prompts
    print("\n3Ô∏è‚É£ Verificando TENANT_PROMPTS...")
    try:
        prompts = supabase.table('tenant_prompts').select('*').execute()
        print(f"   ‚úÖ {len(prompts.data)} prompts configurados")

        relatorio.append("### 3. Prompts dos Assistentes")
        relatorio.append("")
        for prompt in prompts.data:
            tenant = next((t for t in tenants.data if t['id'] == prompt['tenant_id']), None)
            if tenant:
                print(f"      - {tenant['nome_empresa']}: Assistente {prompt['nome_assistente']} "
                      f"({prompt['modelo_llm']})")
                relatorio.append(f"**{tenant['nome_empresa']} - {prompt['nome_assistente']}**")
                relatorio.append(f"- Modelo: {prompt['modelo_llm']}")
                relatorio.append(f"- Temperatura: {prompt['temperatura']}")
                relatorio.append(f"- Tom de voz: {prompt['tom_voz']}")
                relatorio.append(f"- Mensagem boas-vindas: \"{prompt['mensagem_boas_vindas'][:50]}...\"")
                relatorio.append("")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

    # 4. Verificar Profissionais
    print("\n4Ô∏è‚É£ Verificando PROFISSIONAIS...")
    try:
        profissionais = supabase.table('profissionais').select('*').execute()
        print(f"   ‚úÖ {len(profissionais.data)} profissionais cadastrados")

        relatorio.append("### 4. Profissionais Cadastrados")
        relatorio.append("")
        for prof in profissionais.data:
            tenant = next((t for t in tenants.data if t['id'] == prof['tenant_id']), None)
            if tenant:
                print(f"      - {tenant['nome_empresa']}: {prof['nome_exibicao']} - {prof['especialidade_principal']}")
                relatorio.append(f"**{prof['nome_completo']}** ({tenant['nome_empresa']})")
                relatorio.append(f"- Exibi√ß√£o: {prof['nome_exibicao']}")
                relatorio.append(f"- Especialidade: {prof['especialidade_principal']}")
                if prof.get('crm_cro'):
                    relatorio.append(f"- CRM/CRO: {prof['crm_cro']}")
                relatorio.append("")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

    # 5. Verificar Especialidades
    print("\n5Ô∏è‚É£ Verificando ESPECIALIDADES...")
    try:
        especialidades = supabase.table('especialidades').select('*').execute()
        print(f"   ‚úÖ {len(especialidades.data)} especialidades")

        relatorio.append("### 5. Especialidades")
        relatorio.append("")
        for esp in especialidades.data:
            tenant = next((t for t in tenants.data if t['id'] == esp['tenant_id']), None)
            if tenant:
                print(f"      - {tenant['nome_empresa']}: {esp['nome']}")
                relatorio.append(f"- **{esp['nome']}** ({tenant['nome_empresa']}): {esp['descricao']}")
        relatorio.append("")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

    # 6. Verificar Clientes (migra√ß√£o)
    print("\n6Ô∏è‚É£ Verificando CLIENTES (migra√ß√£o)...")
    try:
        clientes_migrados = supabase.table('clients_dev').select('id', count='exact').not_.is_('tenant_id', 'null').execute()
        clientes_total = supabase.table('clients_dev').select('id', count='exact').execute()
        print(f"   ‚úÖ {clientes_migrados.count}/{clientes_total.count} clientes com tenant_id")

        relatorio.append("### 6. Migra√ß√£o de Dados Existentes")
        relatorio.append("")
        relatorio.append(f"**Clientes:**")
        relatorio.append(f"- Total: {clientes_total.count}")
        relatorio.append(f"- Com tenant_id: {clientes_migrados.count}")
        relatorio.append(f"- Status: {'‚úÖ Completo' if clientes_migrados.count == clientes_total.count else '‚ö†Ô∏è Parcial'}")
        relatorio.append("")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

    # 7. Verificar Documents (migra√ß√£o)
    print("\n7Ô∏è‚É£ Verificando DOCUMENTS (migra√ß√£o)...")
    try:
        docs_migrados = supabase.table('conhecimento_dev').select('id', count='exact').not_.is_('tenant_id', 'null').execute()
        docs_total = supabase.table('conhecimento_dev').select('id', count='exact').execute()
        print(f"   ‚úÖ {docs_migrados.count}/{docs_total.count} documentos com tenant_id")

        relatorio.append(f"**Documentos (RAG):**")
        relatorio.append(f"- Total: {docs_total.count}")
        relatorio.append(f"- Com tenant_id: {docs_migrados.count}")
        relatorio.append(f"- Status: {'‚úÖ Completo' if docs_migrados.count == docs_total.count else '‚ö†Ô∏è Parcial'}")
        relatorio.append("")
    except Exception as e:
        print(f"   ‚ùå Erro: {e}")

    # Resumo Final
    print("\n" + "=" * 70)
    print("üìä RESUMO FINAL")
    print("=" * 70)
    print(f"‚úÖ Tenants: {len(tenants.data)}")
    print(f"‚úÖ Features configuradas: {len(features.data)}")
    print(f"‚úÖ Prompts: {len(prompts.data)}")
    print(f"‚úÖ Profissionais: {len(profissionais.data)}")
    print(f"‚úÖ Especialidades: {len(especialidades.data)}")
    print(f"‚úÖ Clientes migrados: {clientes_migrados.count}/{clientes_total.count}")
    print(f"‚úÖ Documentos migrados: {docs_migrados.count}/{docs_total.count}")
    print()

    relatorio.append("## üìà Resumo Executivo")
    relatorio.append("")
    relatorio.append(f"- ‚úÖ **{len(tenants.data)} tenants** criados e configurados")
    relatorio.append(f"- ‚úÖ **{len(profissionais.data)} profissionais** cadastrados")
    relatorio.append(f"- ‚úÖ **{len(especialidades.data)} especialidades** registradas")
    relatorio.append(f"- ‚úÖ **{clientes_migrados.count} clientes** migrados com tenant_id")
    relatorio.append(f"- ‚úÖ **{docs_migrados.count} documentos RAG** migrados com tenant_id")
    relatorio.append("")
    relatorio.append("## üéØ Pr√≥ximos Passos (FASE 2)")
    relatorio.append("")
    relatorio.append("1. ‚úÖ Estrutura multi-tenant criada")
    relatorio.append("2. ‚è≠Ô∏è Criar middleware de tenant identification")
    relatorio.append("3. ‚è≠Ô∏è Adaptar c√≥digo para usar tenant_id dinamicamente")
    relatorio.append("4. ‚è≠Ô∏è Implementar sele√ß√£o de profissional (cl√≠nicas)")
    relatorio.append("5. ‚è≠Ô∏è Criar admin dashboard b√°sico")
    relatorio.append("")
    relatorio.append("---")
    relatorio.append(f"**Data:** {os.popen('date').read().strip()}")
    relatorio.append(f"**Ambiente:** Supabase DEV")
    relatorio.append(f"**Status:** ‚úÖ Fase 1 Conclu√≠da")

    # Salvar relat√≥rio
    print("üíæ Salvando relat√≥rio...")
    with open('FASE_1_RELATORIO.md', 'w', encoding='utf-8') as f:
        f.write('\n'.join(relatorio))
    print("‚úÖ Relat√≥rio salvo: FASE_1_RELATORIO.md")
    print()

if __name__ == "__main__":
    main()
